{
  "hash": "eb01caaa7fe5e5d7c2d886fd7be0779d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Funciones y Bucles de Control\nauthor: Christian Badillo\nformat: html\ndate: today\norder: 3\nfilters:\n  - pyodide\n  - fontawesome\n  - iconify\n---\n\n# Introducción\n\nEn esta lección, aprenderemos sobre funciones y estructuras de control en Python. Las funciones son bloques de código que se pueden reutilizar en diferentes partes de un programa, permitiendo que el código sea más modular y fácil de mantener. Las estructuras de control son bloques de código que permiten controlar el flujo de ejecución de un programa, como bucles y declaraciones condicionales. Son dos conceptos fundamentales en programación que nos permiten escribir código más eficiente y legible.\n\nAntes de proceder, hay que explicar la tabulación en Python. A diferencia de otros lenguajes de programación que utilizan llaves `{}` para delimitar bloques de código, Python utiliza la tabulación para indicar la estructura del código. Esto significa que los bloques de código se definen por la cantidad de espacios o tabulaciones al principio de una línea. Es importante mantener la consistencia en la tabulación para que el código funcione correctamente.\n\n# Funciones\n\nLas ***funciones*** son bloques de código que se pueden reutilizar en diferentes partes de un programa, permitiendo que el código sea más modular y fácil de mantener. En Python, las funciones se definen con la palabra clave `def`, seguida del nombre de la función y una lista de parámetros entre paréntesis. El cuerpo de la función se define con una tabulación (4 espacios) y puede contener cualquier número de instrucciones.\n\nPrimero elaboremos una función sencilla, la cual se llamará `saludo` y recibirá un parámetro `nombre`:\n\n::: {#df42da7b .cell execution_count=2}\n``` {.python .cell-code}\ndef saludo(nombre):\n    print(f'Hola, {nombre}!')\n\nsaludo('Christian')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola, Christian!\n```\n:::\n:::\n\n\nAlgo a destacar en esta función es que usamos una característica de las `strings` denominada **f-string** para imprimir el saludo. Las f-strings son una forma de formatear cadenas de texto en Python, permitiendo la interpolación de variables dentro de una cadena. Para definir una f-string, se coloca una `f` antes de las comillas de apertura y se encierra la variable entre llaves `{}`. Es decir, le estamos diciendo a Python que reemplace `{nombre}` con el valor de la variable `nombre` que en este caso es `'Christian'`.\n\nLas funciones pueden devolver un valor usando la palabra clave `return`. Por ejemplo, la siguiente función `cuadrado` recibe un número `x` y devuelve su cuadrado:\n\n::: {#016206dc .cell execution_count=3}\n``` {.python .cell-code}\ndef cuadrado(x):\n    return x ** 2\n\nprint(cuadrado(5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n25\n```\n:::\n:::\n\n\nComo habrás notado en los ejemplos anteriores, hemos usado el nombre de la función seguido de paréntesis para llamarla. En el caso de la función `saludo`, hemos pasado un argumento `nombre` entre los paréntesis. En el caso de la función `cuadrado`, hemos pasado el número `5`. Estos argumentos se llaman ***parámetros*** y son los valores que la función espera recibir para realizar su tarea.\n\nHay varias formas de poner los argumentos en una función:\n\n- **Argumentos posicionales**: Los argumentos se pasan en el orden en que se definen en la función.\n- **Argumentos con nombre**: Los argumentos se pasan con el nombre del parámetro al que corresponden.\n- **Argumentos por defecto**: Los argumentos tienen un valor por defecto que se usa si no se proporciona un valor.\n- **Argumentos variables**: Los argumentos se pasan como una lista o un diccionario.\n\nEn los ejemplos hemos utilizado argumentos posicionales. A continuación, veremos cómo usar argumentos con nombre:\n\n::: {#f45b53e3 .cell execution_count=4}\n``` {.python .cell-code}\ndef resta(num1, num2):\n    return num1 - num2\n\nprint(resta(num1=10, num2=5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\nEn este caso, hemos pasado los argumentos `num1` y `num2` con sus nombres correspondientes y les hemos asignado valores. Esto nos permite pasar los argumentos en cualquier orden, siempre y cuando especifiquemos el nombre del parámetro al que corresponden.\n\nAhora veamos cómo usar argumentos por defecto:\n\n::: {#33e57f8e .cell execution_count=5}\n``` {.python .cell-code}\ndef potencia(base, exponente=2):\n    return base ** exponente\n\nprint(potencia(2))\nprint(potencia(2, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n8\n```\n:::\n:::\n\n\nEn este caso, la función `potencia` tiene un argumento `exponente` con un valor por defecto de `2`. Si no se proporciona un valor para `exponente`, se usará el valor por defecto. Si se proporciona un valor, se usará ese valor en su lugar.\n\n## Funciones Lambda\n\nLas funciones lambda son funciones anónimas que se pueden definir en una sola línea. Se definen con la palabra clave `lambda`, seguida de una lista de parámetros y una expresión que se evalúa y devuelve el resultado. Por ejemplo, la siguiente función lambda calcula el cuadrado de un número:\n\n::: {#654a0e69 .cell execution_count=6}\n``` {.python .cell-code}\ncuadrado_lamda = lambda x: x ** 2\n\nprint(cuadrado_lamda(5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n25\n```\n:::\n:::\n\n\nLas funciones lambda son útiles cuando se necesita una función simple y no es necesario definirla con una declaración `def`. \n\nAhora definamos una función lambda un poco más compleja para sumar dos números:\n\n::: {#a9f64f7a .cell execution_count=7}\n``` {.python .cell-code}\nsuma_lambda = lambda x, y: x + y\n\nprint(suma_lambda(3, 4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7\n```\n:::\n:::\n\n\n## Creando funciones legibles\n\nEs importante que las funciones sean fáciles de leer y entender. Para ello, es recomendable seguir las siguientes buenas prácticas:\n\n- **Nombres descriptivos**: Usa nombres descriptivos para las funciones y los parámetros.\n- **Comentarios**: Añade comentarios para explicar lo que hace cada parte de la función.\n- **Documentación**: Usa [docstrings](https://peps.python.org/pep-0257/) para documentar la función y proporcionar información sobre su propósito, los parámetros que espera y el valor que devuelve.\n- **Dividir en funciones más pequeñas**: Si una función es demasiado larga o hace demasiadas cosas, divídela en funciones más pequeñas que realicen tareas específicas.\n\nVeamos un ejemplo de una función bien documentada y legible:\n\n```{pyodide-python}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef sine_wave(amplitude: float = None, frequency: float = None, phase: float = None, duration: float = None, sample_rate: float = None):\n    \"\"\"\n    Generate a sine wave signal.\n\n    Parameters:\n    - amplitude: The amplitude of the sine wave.\n    - frequency: The frequency of the sine wave in Hz.\n    - phase: The phase of the sine wave in radians.\n    - duration: The duration of the signal in seconds.\n    - sample_rate: The sample rate of the signal in Hz.\n\n    Returns:\n    - t: An array of time values.\n    - x: An array of signal values.\n    \"\"\"\n    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False) # Generate time values\n    x = amplitude * np.sin(2 * np.pi * frequency * t + phase) # Generate signal values\n    return t, x\n\n# Generate a sine wave signal with amplitude 1, frequency 1 Hz, phase 0, duration 1 second, and sample rate 1000 Hz\nt, x = sine_wave(amplitude=1, frequency=1, phase=0, duration=1, sample_rate=1000) \n\n# Plot the sine wave signal\ndef plot_signal(t, x):\n    plt.figure() # Create a new figure\n    plt.plot(t, x) # Plot the signal\n    plt.xlabel('Time (s)') # Set the x-axis label\n    plt.ylabel('Amplitude') # Set the y-axis label\n    plt.grid(True) # Show grid\n    plt.show() # Show the plot\n\nplot_signal(t, x)\n```\n\nEn este ejemplo, hemos definido una función `sine_wave` que genera una señal de onda sinusoidal con los parámetros de amplitud, frecuencia, fase, duración y tasa de muestreo especificados. Hemos documentado la función con un docstring que explica los parámetros que espera y el valor que devuelve. También hemos definido una función `plot_signal` que traza la señal generada. Esta función es más legible y fácil de entender gracias a los comentarios y la documentación.\n\n# Estrucutras de Control\n\nLas estructuras de control son bloques de código que permiten controlar el flujo de ejecución de un programa. En Python, las estructuras de control más comunes son los bucles `for` y `while`, y las declaraciones `if`, `elif` y `else`.\n\n## Estrucutras de Control: `if`, `elif` y `else`\n\nLa declaración `if` se utiliza para ejecutar un bloque de código si una condición es verdadera. La declaración `elif` se utiliza para comprobar múltiples condiciones si la condición anterior es falsa. La declaración `else` se utiliza para ejecutar un bloque de código si ninguna de las condiciones anteriores es verdadera.\n\n![Estructura de Control `if`](/img/fund_python/diagramaif-else1.png){width=75%}\n\nLa sintaxis de la declaración `if` en python es la siguiente:\n\n```python\nif condicion:\n    # Código a ejecutar si la condición es verdadera\nelif otra_condicion:\n    # Código a ejecutar si la condición anterior es falsa y esta condición es verdadera\nelse:\n    # Código a ejecutar si ninguna de las condiciones anteriores es verdadera\n```\n\n### Ejemplo\n\nSi tenemos varias condiciones que queremos comprobar, podemos usar la declaración `elif` para comprobarlas en orden. A continuación, se muestra un ejemplo de una declaración `if` con `elif` que comprueba si un número es positivo, negativo o cero:\n\n```{pyodide-python}\n# Ejemplo de declaración if con elif\nx = 0 # Cambia el valor de x para probar diferentes casos\nif x > 0:\n    print('El número es positivo')\nelif x < 0:\n    print('El número es negativo')\nelse:\n    print('El número es cero')\n```\n\n## Estrucutras de Control: Bucles `for`\n\nEl bucle `for` se utiliza para iterar sobre una secuencia de elementos, como una lista, una tupla o un rango de números. La sintaxis de un bucle `for` en Python es la siguiente:\n\n```python\nfor elemento in secuencia:\n    # Código a ejecutar en cada iteración\n```\n\n![Estructura de Control `for`](/img/fund_python/estructura_for.png){width=30%}\n\nSon muy útiles cuando se necesita realizar una tarea repetitiva, como recorrer una lista de elementos o realizar una operación en cada elemento de una secuencia, serán vitales para el análisis de datos.\n\n### Ejemplo\n\nVeamos un ejemplo donde imprimimos una cuenta regresiva desde 10 hasta 1:\n\n::: {#469ad222 .cell execution_count=8}\n``` {.python .cell-code}\n# Ejemplo de bucle for\nfor i in range(10, 0, -1):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n```\n:::\n:::\n\n\nLa función `range` genera una secuencia de números desde el primer argumento hasta el segundo argumento, con un paso especificado por el tercer argumento. En este caso, estamos generando una secuencia de números desde 10 hasta 1 con un paso de -1. Es muy común usar `range` en bucles `for`. Otra forma de usar `range` es con un solo argumento, que genera una secuencia de números desde 0 hasta el argumento especificado.\n\n::: {#8f458b59 .cell execution_count=9}\n``` {.python .cell-code}\n# Ejemplo de bucle for con un solo argumento\nfor i in range(5):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\nComo habras notado, la función `range` genera una secuencia de números desde 0 hasta 4, ya que el argumento especificado es 5, si cuentas los números, verás que son 5 números, si quieres hasta 5, debes poner 6.\n\nEn el siguiente tema abordaremos más los usos del ciclo `for` cuando trabajamos con listas y diccionarios o en general con *objetos iterables*.\n\n## Estrucutras de Control: Bucles `while`\n\nEl bucle `while` se utiliza para ejecutar un bloque de código mientras una condición sea verdadera. La sintaxis de un bucle `while` en Python es la siguiente:\n\n```python\nwhile condicion:\n    # Código a ejecutar mientras la condición sea verdadera\n```\n\n![Estructura de Control `while`](/img/fund_python/while.jpg){width=40%}\n\nLos bucles `while` son útiles cuando no se sabe cuántas veces se debe ejecutar un bloque de código y se necesita comprobar una condición en cada iteración. \n\n> {{< fa triangle-exclamation >}} ***ADVERTENCIA.*** Es importante tener cuidado al usar bucles `while`, ya que si la condición nunca se vuelve falsa, el bucle se ejecutará indefinidamente, lo que puede provocar un bucle infinito y bloquear el programa.\n\n### Ejemplo\n\nAhora intentemos algo más complicado, crearemos una función que nos diga cuantas vecces se repite una letra dada en una cadena de texto:\n\n::: {#c82baa71 .cell execution_count=10}\n``` {.python .cell-code}\ndef contar_letra(cadena, letra):\n    contador = 0\n    i = 0\n    while i < len(cadena):\n        if cadena[i] == letra:\n            contador += 1\n        i += 1\n    return contador\n\n# Primer verso y coro de \"Army of One\" de Coldplay \ncadena = \"\"\"\nBeen around the world, wonders to view\nBeen around the world looking for someone like you\nPyramids try, Babylon too\nBut the beautifulest treasures lie in the deepest blue\n\nSo I never say die, aim never untrue\nI'm never so high as when I'm with you\nAnd there isn't a fire that I wouldn't walk through\nMy army of one is gonna fight for you\n\"\"\"\n\nletra = 'a'\nprint(f'La letra \"{letra}\" se repite {contar_letra(cadena, letra)} veces en la cadena de texto.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa letra \"a\" se repite 14 veces en la cadena de texto.\n```\n:::\n:::\n\n\nHemos combinado el uso de un bucle `while` con una declaración `if` para contar cuántas veces se repite una letra en una cadena de texto. En general siempre podemos usar un bucle `for` en lugar de un `while`, pero en este caso, queríamos mostrar cómo se puede usar un bucle `while` para realizar la misma tarea.\n\nCombinar funciones, bucles y estructuras de control es una de las formas más poderosas de programar en cualquier lenguaje, y Python no es la excepción.\n\n# Conclusión\n\nEl uso de funciones y estructuras de control es fundamental en Python y en la programación en general. Las funciones nos permiten reutilizar código y hacerlo más modular y fácil de mantener. Las estructuras de control nos permiten controlar el flujo de ejecución de un programa y realizar tareas repetitivas de manera eficiente. Es importante comprender cómo usar funciones y estructuras de control para escribir código más eficiente y legible. En la siguiente lección, veremos cómo trabajar con listas, tuplas y diccionarios en Python.\n\n# Ejercicios\n\n1. Escribe una función que tome dos números como argumentos y devuelva el mayor de los dos.\n\n2. Escribe una función que te diga si un número es par o impar.\n\n3. Crea una función que diga si una palabra es palíndroma o no.\n\n4. Crea una función que diga si un año es bisiesto o no. ( {{< fa magnifying-glass size=footnotesize >}} ***PISTA:*** un año es bisiesto si es divisible entre $4$, excepto los años que son divisibles entre $100$ pero no entre $400$).\n\n5. Escribe una función que cuente en reversa hasta 0 desde un número dado y si el número es divisible entre $3$, imprime \"Fizz\", si es divisible entre $5$, imprime \"Buzz\" y si es divisible entre $3$ y $5$, imprime \"FizzBuzz\". Por ejemplo, el número $15$ debería imprimir \"FizzBuzz\", el número $9$ debería imprimir \"Fizz\" y el número $10$ debería imprimir \"Buzz\".\n\n```{pyodide-python}\n# Escribe tu código aquí\n```\n\n",
    "supporting": [
      "functions_and_loops_files"
    ],
    "filters": [],
    "includes": {}
  }
}