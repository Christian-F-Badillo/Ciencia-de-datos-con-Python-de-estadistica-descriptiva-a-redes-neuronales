[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Christian Francisco Badillo Hern√°ndez",
    "section": "",
    "text": "twitter\n  \n  \n    \n     Github\n  \n  \n    \n     LinkedIn\n  \n\n  \n  \nChristian Badiillo es egresado de la Facultad de Psicolog√≠a, UNAM con apasionado inter√©s por el estudio del comportamiento humano su modelamiento computacional y el an√°lisis estad√≠stico bayesiano de datos. Actualmente es miembro del Lab25 ‚ÄúAprendizaje y Comportamiento Adaptable‚Äù de la Facultad de Psicolog√≠a, UNAM donde se dedica a la investigaci√≥n en el campo del modelamiento computacional del comportamiento y su intersecci√≥n con la inteligencia artificial.\n\n\nFacultad de Psicolog√≠a UNAM | Ciudad de M√©xico, M√©xico Licenciatura en Psicolog√≠a | Ago 2019 - Ago 2023\n\n\n\nIIMAS | Servicio Social - Desarrollo de sistemas inteligentes usando deep learning | Feb 2024 - presente\nFacultad de Psicolog√≠a UNAM | Impartici√≥n de Curso Intersemestral - Temas Selectos en Estad√≠stica | Periodo 2024-1\nUNAM | Curso de Verano - Macroentrenamiento en Inteligencia Artificial (MeIA) 2023. | Jun 2023\nNeuromatch Academy | Curso de Verano - NMA Computational Neuroscience | Jul 2022",
    "crumbs": [
      "Con√≥cenos"
    ]
  },
  {
    "objectID": "about.html#educaci√≥n",
    "href": "about.html#educaci√≥n",
    "title": "Christian Francisco Badillo Hern√°ndez",
    "section": "",
    "text": "Facultad de Psicolog√≠a UNAM | Ciudad de M√©xico, M√©xico Licenciatura en Psicolog√≠a | Ago 2019 - Ago 2023",
    "crumbs": [
      "Con√≥cenos"
    ]
  },
  {
    "objectID": "about.html#experiencia",
    "href": "about.html#experiencia",
    "title": "Christian Francisco Badillo Hern√°ndez",
    "section": "",
    "text": "IIMAS | Servicio Social - Desarrollo de sistemas inteligentes usando deep learning | Feb 2024 - presente\nFacultad de Psicolog√≠a UNAM | Impartici√≥n de Curso Intersemestral - Temas Selectos en Estad√≠stica | Periodo 2024-1\nUNAM | Curso de Verano - Macroentrenamiento en Inteligencia Artificial (MeIA) 2023. | Jun 2023\nNeuromatch Academy | Curso de Verano - NMA Computational Neuroscience | Jul 2022",
    "crumbs": [
      "Con√≥cenos"
    ]
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Ciencia de Datos con Python",
    "section": "",
    "text": "MIT License\nCopyright (c) 2024 Christian Francisco Badillo Hern√°ndez\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Volver arriba"
  },
  {
    "objectID": "intro_python/Variables.html",
    "href": "intro_python/Variables.html",
    "title": "Declaraci√≥n de Variables y Operaciones",
    "section": "",
    "text": "En Python utilizamos variables para almacenar informaci√≥n en la memoria de la computadora. Las variables son como cajas en las que podemos guardar informaci√≥n, cada caja tiene un nombre y un contenido. Existen varias reglas para dar nombre a las variables en Python:\n\nEl nombre debe comenzar con una letra o un gui√≥n bajo.\nNo puede comenzar con un n√∫mero.\nPuede contener letras, n√∫meros y guiones bajos.\n\nEl proceso de crear (dar valor) a una variable se conoce como declaraci√≥n de variables y es sensible a may√∫sculas y min√∫sculas. Esto significa que si declaramos las variables nombre, Nombre y NOMBRE ser√°n diferentes.\n\n\nVer c√≥digo\nnombre = \"Christian\"\nNombre = \"Jimena\"\nNOMBRE = \"Luis\"\n\nprint(nombre == Nombre)\nprint(Nombre == NOMBRE)\nprint(NOMBRE == nombre)\n\n\nFalse\nFalse\nFalse\n\n\nPor lo cual podemos ver que las variables nombre, Nombre y NOMBRE son diferentes, pues al realizar la comparaci√≥n entre ellas, el resultado es False, tambi√©n podemos observar la forma de declarar variables en Python, la cual es nombre_variable = valor_variable.\nPodemos sobrescribir el contenido de una variable en cualquier momento.\n\n\nVer c√≥digo\nprint(nombre)\nnombre = \"Cesar\"\nprint(nombre)\n\n\nChristian\nCesar\n\n\nEn el ejemplo anterior, hemos cambiado el contenido de la variable nombre de ‚ÄúChristian‚Äù a ‚ÄúCesar‚Äù. En Python, podemos asignar cualquier tipo de dato a una variable. Los tipos de datos m√°s comunes en Python son:\n\nint: N√∫meros enteros.\nfloat: N√∫meros decimales.\nstr: Cadenas de texto.\nbool: Valores booleanos (verdadero o falso).\nlist: Listas de elementos.\ntuple: Tuplas de elementos.\ndict: Diccionarios de elementos.\n\n\n\n\n\nLos n√∫meros enteros son n√∫meros que no tienen parte decimal. En Python, podemos declarar un n√∫mero entero de la siguiente manera:\n\n\nVer c√≥digo\nnumero_entero = 10\nprint(numero_entero)\n\n\n10\n\n\nOtra forma de declarar un n√∫mero entero es utilizando la funci√≥n int() para convertir un n√∫mero decimal o un booleano a un n√∫mero entero. Veamos un ejemplo:\n\n\nVer c√≥digo\nnumero_entero = int(10.5)\nprint(numero_entero)\nnumero_entero = int(10.6)\nprint(numero_entero)\n\nnumero_entero = int(True)\nprint(numero_entero)\n\n\n10\n10\n1\n\n\nLos n√∫meros decimales son n√∫meros que tienen parte decimal. En Python, podemos declarar un n√∫mero decimal de la siguiente manera:\n\n\nVer c√≥digo\nnumero_decimal = 10.5\nprint(numero_decimal)\n\n\n10.5\n\n\nOtra forma de declarar un n√∫mero decimal es utilizando la funci√≥n float() para convertir un n√∫mero entero o un booleano a un n√∫mero decimal.\n\n\nVer c√≥digo\nnumero_decimal = float(10)\nprint(numero_decimal)\n\nnumero_decimal = float(True)\nprint(numero_decimal)\n\n\n10.0\n1.0\n\n\nIgualmente podemos utilizar la nota cient√≠fica para declarar un n√∫mero decimal en Python con la letra e seguida de un n√∫mero entero por ejemplo, 22e10 es equivalente a \\(22 * 10^10\\). En c√≥digo:\n\n\nVer c√≥digo\nnumero_decimal = 1.5e2\nprint(numero_decimal)\n\nnumero_decimal = 1.5e-2\nprint(numero_decimal)\n\n\n150.0\n0.015\n\n\n\n\n\nLas cadenas de texto son una secuencia de car√°cteres (letras, n√∫meros y s√≠mbolos). En Python, se pueden declarar cadenas de texto utilizando comillas simples ' o comillas dobles \". Veamos un ejemplo:\n\n\nVer c√≥digo\ncadena_texto = \"Hola Mundo\"\nprint(cadena_texto)\n\n\nHola Mundo\n\n\nOtra forma de declarar una cadena de texto es utilizando la funci√≥n str() para convertir un n√∫mero entero, decimal o booleano a una cadena de texto. Tambi√©n podemos combinar las comillas simples y dobles para poder usar una o la otra dentro de la cadena de texto. Por ejemplo:\n\n\nVer c√≥digo\ntexto= 'No te procupes, solo es un \"amigo\" / \"amiga\"'\nprint(texto)\n\n\nNo te procupes, solo es un \"amigo\" / \"amiga\"\n\n\nTamb√©n podemos imprimir saltos de l√≠nea (\\n), tabulaciones (\\t) y caracteres especiales en una cadena de texto. Por ejemplo:\n\n\nVer c√≥digo\ntexto = \"Las rosas son rojas,\\nLas violetas son azules,\\nViva el team frio,\\nQuiero un pan \\U0001F35E\\n\"\n\nprint(texto)\n\ntexto = \"\\n\\t Aqui no se habla\\n\\tdel formato APA\\n\\tNo, no, no ü´†\"\n\nprint(texto)\n\n\nLas rosas son rojas,\nLas violetas son azules,\nViva el team frio,\nQuiero un pan üçû\n\n\n     Aqui no se habla\n    del formato APA\n    No, no, no ü´†\n\n\n\n\n\nLos valores booleanos son valores l√≥gicos que pueden ser True (verdadero) o False (falso). En Python, podemos declarar un valor booleano de la siguiente manera:\n\n\nVer c√≥digo\nvalor_booleano = True\nprint(valor_booleano)\n\n\nTrue\n\n\nIgualmente existe la funci√≥n bool() pero su uso es poco utilizado, ya que los valores booleanos se utilizan principalmente en condicionales y bucles, adem√°s es necesario conocer que cosas se consideran True y False en Python.\n\n\nVer c√≥digo\nvalor_booleano = bool(0)\nprint(valor_booleano)\nvalor_booleano = bool(1)\nprint(valor_booleano)\n\nvalor_booleano = bool([])\nprint(valor_booleano)\nvalor_booleano = bool([1, 2, 3])\nprint(valor_booleano)\n\n\nFalse\nTrue\nFalse\nTrue\n\n\nSi recuerdan sus clases de L√≥gica, podr√°n crear una tabla de verdad para evaluar proposiciones l√≥gicas en Python.\n\n\n\nLa documentaci√≥n de c√≥digo es una pr√°ctica com√∫n en programaci√≥n y una buena costumbre para escribir c√≥digo limpio y legible. En Python, podemos documentar nuestro c√≥digo utilizando comentarios.\nLos comentarios son l√≠neas de c√≥digo que no se ejecutan y se utilizan para explicar el c√≥digo. En Python, los comentarios se crean utilizando el s√≠mbolo # y cualquier texto que se escriba despu√©s de este s√≠mbolo se considera un comentario y no se ejecuta.\n\n\nVer c√≥digo\n# Esto es un comentario\nprint(\"Hola Mundo\") # Aqu√≠ podemos comentar que hace esta l√≠nea de c√≥digo\n\n\nHola Mundo\n\n\nTambi√©n podemos crear comentarios multil√≠nea utilizando tres comillas simples ''' o tres comillas dobles \"\"\", se utiliza mucho esta forma de comentar para documentar funciones o clases, como lo veremos m√°s adelante.\n\n\n\nEn el siguiente bloque podr√°n ejecutar c√≥digo de Python usando su navegador web. Igualmente pueden hacerlo en su computadora o en la nube utilizando Google Colab o Kaggle. Para cada ejercicio deber de escribir su propio c√≥digo, crear un comentario con sus datos, crear su soluci√≥n y tomar una captura de pantalla del resultado. Finalmente, subir la captura a la asignaci√≥n correspondiente en Google Classroom.\n\nDeclarar una variable de cada tipo de dato en Python (entero, decimal, cadena de texto y booleano) e imprimir su valor.\nDeclarar una variable con el nombre poema y asignarle un poema de su elecci√≥n. Imprimir el poema en la consola con el formato adecuado. (Pueden utilizar emojis si lo desean).\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Fundamentos de Python",
      "Declaraci√≥n de Variables y Operaciones"
    ]
  },
  {
    "objectID": "intro_python/Variables.html#tipos-de-variables",
    "href": "intro_python/Variables.html#tipos-de-variables",
    "title": "Declaraci√≥n de Variables y Operaciones",
    "section": "",
    "text": "Los n√∫meros enteros son n√∫meros que no tienen parte decimal. En Python, podemos declarar un n√∫mero entero de la siguiente manera:\n\n\nVer c√≥digo\nnumero_entero = 10\nprint(numero_entero)\n\n\n10\n\n\nOtra forma de declarar un n√∫mero entero es utilizando la funci√≥n int() para convertir un n√∫mero decimal o un booleano a un n√∫mero entero. Veamos un ejemplo:\n\n\nVer c√≥digo\nnumero_entero = int(10.5)\nprint(numero_entero)\nnumero_entero = int(10.6)\nprint(numero_entero)\n\nnumero_entero = int(True)\nprint(numero_entero)\n\n\n10\n10\n1\n\n\nLos n√∫meros decimales son n√∫meros que tienen parte decimal. En Python, podemos declarar un n√∫mero decimal de la siguiente manera:\n\n\nVer c√≥digo\nnumero_decimal = 10.5\nprint(numero_decimal)\n\n\n10.5\n\n\nOtra forma de declarar un n√∫mero decimal es utilizando la funci√≥n float() para convertir un n√∫mero entero o un booleano a un n√∫mero decimal.\n\n\nVer c√≥digo\nnumero_decimal = float(10)\nprint(numero_decimal)\n\nnumero_decimal = float(True)\nprint(numero_decimal)\n\n\n10.0\n1.0\n\n\nIgualmente podemos utilizar la nota cient√≠fica para declarar un n√∫mero decimal en Python con la letra e seguida de un n√∫mero entero por ejemplo, 22e10 es equivalente a \\(22 * 10^10\\). En c√≥digo:\n\n\nVer c√≥digo\nnumero_decimal = 1.5e2\nprint(numero_decimal)\n\nnumero_decimal = 1.5e-2\nprint(numero_decimal)\n\n\n150.0\n0.015\n\n\n\n\n\nLas cadenas de texto son una secuencia de car√°cteres (letras, n√∫meros y s√≠mbolos). En Python, se pueden declarar cadenas de texto utilizando comillas simples ' o comillas dobles \". Veamos un ejemplo:\n\n\nVer c√≥digo\ncadena_texto = \"Hola Mundo\"\nprint(cadena_texto)\n\n\nHola Mundo\n\n\nOtra forma de declarar una cadena de texto es utilizando la funci√≥n str() para convertir un n√∫mero entero, decimal o booleano a una cadena de texto. Tambi√©n podemos combinar las comillas simples y dobles para poder usar una o la otra dentro de la cadena de texto. Por ejemplo:\n\n\nVer c√≥digo\ntexto= 'No te procupes, solo es un \"amigo\" / \"amiga\"'\nprint(texto)\n\n\nNo te procupes, solo es un \"amigo\" / \"amiga\"\n\n\nTamb√©n podemos imprimir saltos de l√≠nea (\\n), tabulaciones (\\t) y caracteres especiales en una cadena de texto. Por ejemplo:\n\n\nVer c√≥digo\ntexto = \"Las rosas son rojas,\\nLas violetas son azules,\\nViva el team frio,\\nQuiero un pan \\U0001F35E\\n\"\n\nprint(texto)\n\ntexto = \"\\n\\t Aqui no se habla\\n\\tdel formato APA\\n\\tNo, no, no ü´†\"\n\nprint(texto)\n\n\nLas rosas son rojas,\nLas violetas son azules,\nViva el team frio,\nQuiero un pan üçû\n\n\n     Aqui no se habla\n    del formato APA\n    No, no, no ü´†\n\n\n\n\n\nLos valores booleanos son valores l√≥gicos que pueden ser True (verdadero) o False (falso). En Python, podemos declarar un valor booleano de la siguiente manera:\n\n\nVer c√≥digo\nvalor_booleano = True\nprint(valor_booleano)\n\n\nTrue\n\n\nIgualmente existe la funci√≥n bool() pero su uso es poco utilizado, ya que los valores booleanos se utilizan principalmente en condicionales y bucles, adem√°s es necesario conocer que cosas se consideran True y False en Python.\n\n\nVer c√≥digo\nvalor_booleano = bool(0)\nprint(valor_booleano)\nvalor_booleano = bool(1)\nprint(valor_booleano)\n\nvalor_booleano = bool([])\nprint(valor_booleano)\nvalor_booleano = bool([1, 2, 3])\nprint(valor_booleano)\n\n\nFalse\nTrue\nFalse\nTrue\n\n\nSi recuerdan sus clases de L√≥gica, podr√°n crear una tabla de verdad para evaluar proposiciones l√≥gicas en Python.\n\n\n\nLa documentaci√≥n de c√≥digo es una pr√°ctica com√∫n en programaci√≥n y una buena costumbre para escribir c√≥digo limpio y legible. En Python, podemos documentar nuestro c√≥digo utilizando comentarios.\nLos comentarios son l√≠neas de c√≥digo que no se ejecutan y se utilizan para explicar el c√≥digo. En Python, los comentarios se crean utilizando el s√≠mbolo # y cualquier texto que se escriba despu√©s de este s√≠mbolo se considera un comentario y no se ejecuta.\n\n\nVer c√≥digo\n# Esto es un comentario\nprint(\"Hola Mundo\") # Aqu√≠ podemos comentar que hace esta l√≠nea de c√≥digo\n\n\nHola Mundo\n\n\nTambi√©n podemos crear comentarios multil√≠nea utilizando tres comillas simples ''' o tres comillas dobles \"\"\", se utiliza mucho esta forma de comentar para documentar funciones o clases, como lo veremos m√°s adelante.\n\n\n\nEn el siguiente bloque podr√°n ejecutar c√≥digo de Python usando su navegador web. Igualmente pueden hacerlo en su computadora o en la nube utilizando Google Colab o Kaggle. Para cada ejercicio deber de escribir su propio c√≥digo, crear un comentario con sus datos, crear su soluci√≥n y tomar una captura de pantalla del resultado. Finalmente, subir la captura a la asignaci√≥n correspondiente en Google Classroom.\n\nDeclarar una variable de cada tipo de dato en Python (entero, decimal, cadena de texto y booleano) e imprimir su valor.\nDeclarar una variable con el nombre poema y asignarle un poema de su elecci√≥n. Imprimir el poema en la consola con el formato adecuado. (Pueden utilizar emojis si lo desean).\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Fundamentos de Python",
      "Declaraci√≥n de Variables y Operaciones"
    ]
  },
  {
    "objectID": "intro_python/Variables.html#operaciones-aritm√©ticas",
    "href": "intro_python/Variables.html#operaciones-aritm√©ticas",
    "title": "Declaraci√≥n de Variables y Operaciones",
    "section": "Operaciones aritm√©ticas",
    "text": "Operaciones aritm√©ticas\nLas operaciones aritm√©ticas son operaciones matem√°ticas que se realizan con n√∫meros. En Python, podemos realizar operaciones aritm√©ticas con variables de tipo entero y decimal, como si fuese una calculadora.\n\n\nVer c√≥digo\nfrom math import sqrt\n# Sumemos dos numeros\nnumero1 = 10\nnumero2 = 5\n\nsuma = numero1 + numero2 # 10 + 5 = 15\nprint(suma)\n\n# Restemos dos numeros\nresta = numero1 - numero2 # 10 - 5 = 5\nprint(resta)\n\n# Multipliquemos dos numeros\nmultiplicacion = numero1 * numero2 # 10 * 5 = 50\nprint(multiplicacion)\n\n# Dividamos dos numeros\ndivision = numero1 / numero2 # 10 / 5 = 2.0\nprint(division)\n\n# Dividamos y solo tomemos la parte entera\ndivision_entera = numero1 // numero2 # 10 // 5 = 2\nprint(division_entera)\n\n# Calculemos el residuo de la divisi√≥n\nmodulo = numero1 % numero2 # 10 % 5 = 0\nprint(modulo)\n\n# Elevemos un numero a una potencia\npotencia = numero1 ** numero2 # 10 ^ 5 = 100000\nprint(potencia)\n\n# Calculemos la raiz cuadrada de un numero\nraiz_cuadrada = numero1 ** 0.5 # sqrt(10) = 3.1622776601683795\nraiz_cuadrada2 = sqrt(numero2) # sqrt(5) = 2.23606797749979\nprint(raiz_cuadrada)\nprint(raiz_cuadrada2)\n\n\n15\n5\n50\n2.0\n2\n0\n100000\n3.1622776601683795\n2.23606797749979",
    "crumbs": [
      "Fundamentos de Python",
      "Declaraci√≥n de Variables y Operaciones"
    ]
  },
  {
    "objectID": "intro_python/Variables.html#operaciones-de-comparaci√≥n",
    "href": "intro_python/Variables.html#operaciones-de-comparaci√≥n",
    "title": "Declaraci√≥n de Variables y Operaciones",
    "section": "Operaciones de comparaci√≥n",
    "text": "Operaciones de comparaci√≥n\nLas operaciones de comparaci√≥n son operaciones que se utilizan para comparar dos valores y devuelven un valor booleano (True o False).\n\n\nVer c√≥digo\n# Comparar si dos numeros son iguales\nnumero1 = 148\nnumero2 = 47\n\ncomparacion = numero1 == numero2\nprint(comparacion)\n\n# Comparar si dos numeros son diferentes\ncomparacion = numero1 != numero2\nprint(comparacion)\n\n# Comparar si un numero es mayor que otro\ncomparacion = numero1 &gt; numero2\nprint(comparacion)\n\n# Comparar si un numero es menor que otro\ncomparacion = numero1 &lt; numero2\nprint(comparacion)\n\n# Comparar si un numero es mayor o igual que otro\ncomparacion = numero1 &gt;= numero2\nprint(comparacion)\n\n# Comparar si un numero es menor o igual que otro\ncomparacion = numero1 &lt;= numero2\nprint(comparacion)\n\n\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse",
    "crumbs": [
      "Fundamentos de Python",
      "Declaraci√≥n de Variables y Operaciones"
    ]
  },
  {
    "objectID": "intro_python/Variables.html#operaciones-con-cadenas-de-texto",
    "href": "intro_python/Variables.html#operaciones-con-cadenas-de-texto",
    "title": "Declaraci√≥n de Variables y Operaciones",
    "section": "Operaciones con cadenas de texto",
    "text": "Operaciones con cadenas de texto\nLas operaciones con cadenas de texto son operaciones que se utilizan para concatenar, multiplicar y comparar cadenas de texto. Se utilizan principalmente para manipular texto en Python.\nPara concatenar dos cadenas de texto, simplemente se utilizan el operador +.\n\n\nVer c√≥digo\n# Concatenar dos cadenas de texto\ncadena1 = \"Hola\"\ncadena2 = \"Mundo\"\n\nconcatenacion = cadena1 + \" \" + cadena2\nprint(concatenacion)\n\n\nHola Mundo\n\n\nPara multiplicar una cadena de texto por un n√∫mero entero, simplemente se utiliza el operador *.\n\n\nVer c√≥digo\n# Multiplicar una cadena de texto\ncadena = \"Me gusta programar en Python\\n\"\n\nmultiplicacion = cadena * 5\nprint(multiplicacion)\n\n\nMe gusta programar en Python\nMe gusta programar en Python\nMe gusta programar en Python\nMe gusta programar en Python\nMe gusta programar en Python\n\n\n\nPara comparar dos cadenas de texto, simplemente se utilizan los operadores de comparaci√≥n.\n\n\nVer c√≥digo\n# Comparar dos cadenas de texto\ncadena1 = \"Muchas gracias\"\ncadena2 = \"De nada\"\n\ncomparacion = cadena1 == cadena2 # Comparar si dos cadenas son iguales\nprint(comparacion)\n\ncomparacion = cadena1 != cadena2 # Comparar si dos cadenas son diferentes\nprint(comparacion)\n\ncomparacion = cadena1 &gt; cadena2 # Comparar si una cadena tiene m√°s caracteres que otra\nprint(comparacion)\n\ncomparacion = cadena1 &lt; cadena2 # Comparar si una cadena tiene menos caracteres que otra\nprint(comparacion)\n\ncomparacion = cadena1 &gt;= cadena2 # Comparar si una cadena tiene m√°s o igual cantidad de caracteres que otra\nprint(comparacion)\n\ncomparacion = cadena1 &lt;= cadena2 # Comparar si una cadena tiene menos o igual cantidad de caracteres que otra\nprint(comparacion)\n\n\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\n\n\n\nEjercicios 1.2\n\n Instrucciones \n\nEn el siguiente bloque podr√°n ejecutar c√≥digo de Python usando su navegador web. Igualmente pueden hacerlo en su computadora o en la nube utilizando Google Colab o Kaggle. Para cada ejercicio deber de escribir su propio c√≥digo, crear un comentario con sus datos, crear su soluci√≥n y tomar una captura de pantalla del resultado. Finalmente, subir la captura a la asignaci√≥n correspondiente en Google Classroom.\n\nSabiendo que el Teorema de Pit√°goras es \\(a^2 + b^2 = c^2\\), calcular la hipotenusa de un tri√°ngulo rect√°ngulo con catetos de 3 y 4 unidades.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSi la velocidad de la luz es de \\(299,792,458\\) m/s, y el tiempo que tarda en llegar la luz del Sol a la Tierra es de \\(8.3\\) minutos, calcular la distancia en kil√≥metros que hay entre el Sol y la Tierra.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCrea dos variables con tu nombre y apellido, y concat√©nalas en una sola variable. Imprime el resultado.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCrea una variable con tu canci√≥n favorita y multiplica por 4 la parte de la letra que m√°s te gusta. Imprime el resultado.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCrea una variable con tu pel√≠cula favorita y compara si la longitud de la cadena de texto es mayor a 10 caracteres. Imprime el resultado.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Fundamentos de Python",
      "Declaraci√≥n de Variables y Operaciones"
    ]
  },
  {
    "objectID": "intro_python/Cloud.html",
    "href": "intro_python/Cloud.html",
    "title": "Instalaci√≥n de Python",
    "section": "",
    "text": "Python  es un lenguaje de programaci√≥n de alto nivel, interpretado y orientado a objetos con sem√°ntica din√°mica. Es un lenguaje de programaci√≥n muy popular en la actualidad debido a su simplicidad y versatilidad. Y ampliamente utilizado en la ciencia de datos, inteligencia artificial, desarrollo web, desarrollo de videojuegos, entre otros.\nVamos a deshilar un poco la definici√≥n anterior para entender mejor lo que significa.\n\n\nUn lenguaje de programaci√≥n de alto nivel es un lenguaje de programaci√≥n que se encuentra m√°s cerca del lenguaje humano que del lenguaje de m√°quina. Por ejemplo para imprimir el resultado de la suma de dos n√∫meros en Python se escribe:\n\na = 5\nb = 3\nprint(a + b)\n\n8\n\n\nCualquier persona que entienda aritm√©tica b√°sica y sepa un poco de ingl√©s puede entender lo que hace este c√≥digo. Esto hace que los programas escritos en Python sean m√°s f√°ciles de leer y de escribir que los programas escritos en lenguajes de programaci√≥n de bajo nivel como el lenguaje ensamblador  o el lenguaje C++  . Por ejemplo en C++ el mismo programa se escribir√≠a de la siguiente forma:\n#include &lt;iostream&gt;\n\nint main() {\n    int a = 5;\n    int b = 3;\n    std::cout &lt;&lt; a + b &lt;&lt; std::endl;\n    return 0;\n} \nY en lenguaje ensamblador se escribir√≠a de la siguiente forma:\nsection .data\n    a db 5\n    b db 3\nsection .text\n    global _start\n_start:\n    mov al, [a]\n    mov bl, [b]\n    add al, bl\n    mov dl, al\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, dl\n    mov edx, 1\n    int 0x80\n    mov eax, 1\n    xor ebx, ebx\n    int 0x80\n\n\n\nUn lenguaje de programaci√≥n interpretado es un lenguaje de programaci√≥n que utiliza un programa llamado int√©rprete para ejecutar el c√≥digo fuente. El int√©rprete de Python se encarga de leer el c√≥digo fuente escrito en Python y ejecutarlo l√≠nea por l√≠nea.\nPor otro lado, los lenguajes de programaci√≥n compilados utilizan un programa llamado compilador para traducir el c√≥digo fuente a un lenguaje de m√°quina que la computadora pueda entender. El c√≥digo fuente compilado se convierte en un archivo ejecutable que puede ser ejecutado por la computadora lo que da como resultado un programa m√°s r√°pido que un programa interpretado y con mayor control sobre el hardware.\n\n\n\nPython es un lenguaje de programaci√≥n orientado a objetos lo que significa que todo en Python es un objeto. Un objeto es una entidad que tiene un estado y un comportamiento. Por ejemplo, un objeto de la clase Persona tiene un estado que incluye el nombre, la edad y la direcci√≥n de la persona y un comportamiento que incluye caminar, hablar y comer.\nEl ejemplo m√°s claro de la orientaci√≥n a objetos en Python es la creaci√≥n de clases y objetos. Una clase es una plantilla que define las propiedades y los m√©todos de un objeto y un objeto es una instancia de una clase. Por ejemplo, la clase Persona define las propiedades y los m√©todos de una persona y un objeto de la clase Persona es una persona en particular.\nEsto en Python se ve de la siguiente forma:\n\nclass Persona:\n    def __init__(self, nombre, edad, direccion):\n        self.nombre = nombre\n        self.edad = edad\n        self.direccion = direccion\n\n    def caminar(self):\n        print(f\"{self.nombre} est√° caminando\")\n\n    def hablar(self):\n        print(f\"{self.nombre} est√° hablando\")\n\n    def comer(self):\n        print(f\"{self.nombre} est√° comiendo\")\n\npersona = Persona(\"Juan\", 25, \"Calle 123\")\npersona.caminar()\npersona.hablar()\npersona.comer()\n\nJuan est√° caminando\nJuan est√° hablando\nJuan est√° comiendo\n\n\n\n\n\nPython es un lenguaje de programaci√≥n con sem√°ntica din√°mica lo que significa que el tipo de una variable se determina en tiempo de ejecuci√≥n y no en tiempo de compilaci√≥n. Por ejemplo, en Python no es necesario declarar el tipo de una variable antes de utilizarla como en otros lenguajes de programaci√≥n como C++ o Java. Por ejemplo, en Python se puede escribir:\n\na = 5\nb = \"Hola\"\nc = 3.14\n\nEn este caso, Python determina que a es un entero, b es una cadena de texto y c es un n√∫mero de punto flotante en tiempo de ejecuci√≥n.\nEn otro lenguaes de programaci√≥n como C++ o Java se tendr√≠a que declarar el tipo de las variables antes de utilizarlas. Por ejemplo, en C++ se tendr√≠a que escribir:\nint a = 5;\nstd::string b = \"Hola\";\nfloat c = 3.14;\nEl tipo puede ser modificado en cualquier momento, por ejemplo:\n\na = 5\nprint(a)\na = \"Hola\"\nprint(a)\na = 3.14\nprint(a)\n\n5\nHola\n3.14",
    "crumbs": [
      "Fundamentos de Python",
      "Instalaci√≥n de Python"
    ]
  },
  {
    "objectID": "intro_python/Cloud.html#interpretado",
    "href": "intro_python/Cloud.html#interpretado",
    "title": "Instalaci√≥n de Python",
    "section": "",
    "text": "Un lenguaje de programaci√≥n interpretado es un lenguaje de programaci√≥n que utiliza un programa llamado int√©rprete para ejecutar el c√≥digo fuente. El int√©rprete de Python se encarga de leer el c√≥digo fuente escrito en Python y ejecutarlo l√≠nea por l√≠nea.\nPor otro lado, los lenguajes de programaci√≥n compilados utilizan un programa llamado compilador para traducir el c√≥digo fuente a un lenguaje de m√°quina que la computadora pueda entender. El c√≥digo fuente compilado se convierte en un archivo ejecutable que puede ser ejecutado por la computadora lo que da como resultado un programa m√°s r√°pido que un programa interpretado y con mayor control sobre el hardware.",
    "crumbs": [
      "Fundamentos de Python",
      "Instalaci√≥n de Python"
    ]
  },
  {
    "objectID": "intro_python/Cloud.html#orientado-a-objetos",
    "href": "intro_python/Cloud.html#orientado-a-objetos",
    "title": "Instalaci√≥n de Python",
    "section": "",
    "text": "Python es un lenguaje de programaci√≥n orientado a objetos lo que significa que todo en Python es un objeto. Un objeto es una entidad que tiene un estado y un comportamiento. Por ejemplo, un objeto de la clase Persona tiene un estado que incluye el nombre, la edad y la direcci√≥n de la persona y un comportamiento que incluye caminar, hablar y comer.\nEl ejemplo m√°s claro de la orientaci√≥n a objetos en Python es la creaci√≥n de clases y objetos. Una clase es una plantilla que define las propiedades y los m√©todos de un objeto y un objeto es una instancia de una clase. Por ejemplo, la clase Persona define las propiedades y los m√©todos de una persona y un objeto de la clase Persona es una persona en particular.\nEsto en Python se ve de la siguiente forma:\n\nclass Persona:\n    def __init__(self, nombre, edad, direccion):\n        self.nombre = nombre\n        self.edad = edad\n        self.direccion = direccion\n\n    def caminar(self):\n        print(f\"{self.nombre} est√° caminando\")\n\n    def hablar(self):\n        print(f\"{self.nombre} est√° hablando\")\n\n    def comer(self):\n        print(f\"{self.nombre} est√° comiendo\")\n\npersona = Persona(\"Juan\", 25, \"Calle 123\")\npersona.caminar()\npersona.hablar()\npersona.comer()\n\nJuan est√° caminando\nJuan est√° hablando\nJuan est√° comiendo",
    "crumbs": [
      "Fundamentos de Python",
      "Instalaci√≥n de Python"
    ]
  },
  {
    "objectID": "intro_python/Cloud.html#sem√°ntica-din√°mica",
    "href": "intro_python/Cloud.html#sem√°ntica-din√°mica",
    "title": "Instalaci√≥n de Python",
    "section": "",
    "text": "Python es un lenguaje de programaci√≥n con sem√°ntica din√°mica lo que significa que el tipo de una variable se determina en tiempo de ejecuci√≥n y no en tiempo de compilaci√≥n. Por ejemplo, en Python no es necesario declarar el tipo de una variable antes de utilizarla como en otros lenguajes de programaci√≥n como C++ o Java. Por ejemplo, en Python se puede escribir:\n\na = 5\nb = \"Hola\"\nc = 3.14\n\nEn este caso, Python determina que a es un entero, b es una cadena de texto y c es un n√∫mero de punto flotante en tiempo de ejecuci√≥n.\nEn otro lenguaes de programaci√≥n como C++ o Java se tendr√≠a que declarar el tipo de las variables antes de utilizarlas. Por ejemplo, en C++ se tendr√≠a que escribir:\nint a = 5;\nstd::string b = \"Hola\";\nfloat c = 3.14;\nEl tipo puede ser modificado en cualquier momento, por ejemplo:\n\na = 5\nprint(a)\na = \"Hola\"\nprint(a)\na = 3.14\nprint(a)\n\n5\nHola\n3.14",
    "crumbs": [
      "Fundamentos de Python",
      "Instalaci√≥n de Python"
    ]
  },
  {
    "objectID": "intro_python/Cloud.html#macos",
    "href": "intro_python/Cloud.html#macos",
    "title": "Instalaci√≥n de Python",
    "section": "MacOs ",
    "text": "MacOs",
    "crumbs": [
      "Fundamentos de Python",
      "Instalaci√≥n de Python"
    ]
  },
  {
    "objectID": "intro_python/Cloud.html#windows",
    "href": "intro_python/Cloud.html#windows",
    "title": "Instalaci√≥n de Python",
    "section": "Windows ",
    "text": "Windows",
    "crumbs": [
      "Fundamentos de Python",
      "Instalaci√≥n de Python"
    ]
  },
  {
    "objectID": "intro_python/Cloud.html#instalar-visual-studio-code",
    "href": "intro_python/Cloud.html#instalar-visual-studio-code",
    "title": "Instalaci√≥n de Python",
    "section": "Instalar Visual Studio Code ",
    "text": "Instalar Visual Studio Code \nLa instalaci√≥n de Visual Studio Code es muy sencilla, solo debes de ir a la p√°gina oficial de Visual Studio Code y descargar el instalador correspondiente a tu sistema operativo, pero si prefieres ver un video que te gu√≠e en la instalaci√≥n aqu√≠ te dejo uno para MacOS y otro para Windows.\n\nMacOS \n\n\n\nWindows",
    "crumbs": [
      "Fundamentos de Python",
      "Instalaci√≥n de Python"
    ]
  },
  {
    "objectID": "intro_python/functions_and_loops.html",
    "href": "intro_python/functions_and_loops.html",
    "title": "Funciones y Bucles de Control",
    "section": "",
    "text": "Las funciones son bloques de c√≥digo que se pueden reutilizar en diferentes partes de un programa, permitiendo que el c√≥digo sea m√°s modular y f√°cil de mantener. En Python, las funciones se definen con la palabra clave def, seguida del nombre de la funci√≥n y una lista de par√°metros entre par√©ntesis. El cuerpo de la funci√≥n se define con sangr√≠a y puede contener cualquier n√∫mero de instrucciones.\nPrimero elaboremos una funci√≥n sencilla, la cual se llamar√° saludo y recibir√° un par√°metro nombre:\n\nVer c√≥digo\n```{python}\ndef saludo(nombre):\n    print(f'Hola, {nombre}!')\n\nsaludo('Christian')\n```\n\nHola, Christian!\nHemos usado una f-string para imprimir el saludo. Las f-strings son una forma de formatear cadenas de texto en Python, permitiendo la interpolaci√≥n de variables dentro de una cadena. Para definir una f-string, se coloca una f antes de las comillas de apertura y se encierra la variable entre llaves {}. Es decir, le estamos diciendo a Python que reemplace {nombre} con el valor de la variable nombre que en este caso es 'Christian'.\nLas funciones pueden devolver un valor usando la palabra clave return. Por ejemplo, la siguiente funci√≥n cuadrado recibe un n√∫mero x y devuelve su cuadrado:\n\nVer c√≥digo\n```{python}\ndef cuadrado(x):\n    return x ** 2\n\nprint(cuadrado(5))\n```\n\n25\nComo habr√°s notado en los ejemplos anteriores, hemos usado el nombre de la funci√≥n seguido de par√©ntesis para llamarla. En el caso de la funci√≥n saludo, hemos pasado un argumento nombre entre los par√©ntesis. En el caso de la funci√≥n cuadrado, hemos pasado el n√∫mero 5. Estos argumentos se llaman par√°metros y son los valores que la funci√≥n espera recibir para realizar su tarea.\nHay varias formas de poner los argumentos en una funci√≥n:\n\nArgumentos posicionales: Los argumentos se pasan en el orden en que se definen en la funci√≥n.\nArgumentos con nombre: Los argumentos se pasan con el nombre del par√°metro al que corresponden.\nArgumentos por defecto: Los argumentos tienen un valor por defecto que se usa si no se proporciona un valor.\nArgumentos variables: Los argumentos se pasan como una lista o un diccionario.\n\nEn los ejemplos hemos utilizado argumentos posicionales. A continuaci√≥n, veremos c√≥mo usar argumentos con nombre:\n\nVer c√≥digo\n```{python}\ndef resta(num1, num2):\n    return num1 - num2\n\nprint(resta(num1=10, num2=5))\n```\n\n5\nEn este caso, hemos pasado los argumentos num1 y num2 con sus nombres correspondientes y les hemos asignado valores. Esto nos permite pasar los argumentos en cualquier orden, siempre y cuando especifiquemos el nombre del par√°metro al que corresponden.\nAhora veamos c√≥mo usar argumentos por defecto:\n\nVer c√≥digo\n```{python}\ndef potencia(base, exponente=2):\n    return base ** exponente\n\nprint(potencia(2))\nprint(potencia(2, 3))\n```\n\n4 8\nEn este caso, la funci√≥n potencia tiene un argumento exponente con un valor por defecto de 2. Si no se proporciona un valor para exponente, se usar√° el valor por defecto. Si se proporciona un valor, se usar√° ese valor en su lugar.\n\n\nLas funciones lambda son funciones an√≥nimas que se pueden definir en una sola l√≠nea. Se definen con la palabra clave lambda, seguida de una lista de par√°metros y una expresi√≥n que se eval√∫a y devuelve el resultado. Por ejemplo, la siguiente funci√≥n lambda calcula el cuadrado de un n√∫mero:\n\nVer c√≥digo\n```{python}\ncuadrado_lamda = lambda x: x ** 2\n\nprint(cuadrado_lamda(5))\n```\n\n25\nLas funciones lambda son √∫tiles cuando se necesita una funci√≥n simple y no es necesario definirla con una declaraci√≥n def.\nAhora definamos una funci√≥n lambda un poco m√°s compleja para sumar dos n√∫meros:\n\nVer c√≥digo\n```{python}\nsuma_lambda = lambda x, y: x + y\n\nprint(suma_lambda(3, 4))\n```\n\n7\n\n\n\nEs importante que las funciones sean f√°ciles de leer y entender. Para ello, es recomendable seguir las siguientes buenas pr√°cticas:\n\nNombres descriptivos: Usa nombres descriptivos para las funciones y los par√°metros.\nComentarios: A√±ade comentarios para explicar lo que hace cada parte de la funci√≥n.\nDocumentaci√≥n: Usa docstrings para documentar la funci√≥n y proporcionar informaci√≥n sobre su prop√≥sito, los par√°metros que espera y el valor que devuelve.\nDividir en funciones m√°s peque√±as: Si una funci√≥n es demasiado larga o hace demasiadas cosas, div√≠dela en funciones m√°s peque√±as que realicen tareas espec√≠ficas.\n\nVeamos un ejemplo de una funci√≥n bien documentada y legible:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este ejemplo, hemos definido una funci√≥n sine_wave que genera una se√±al de onda sinusoidal con los par√°metros de amplitud, frecuencia, fase, duraci√≥n y tasa de muestreo especificados. Hemos documentado la funci√≥n con un docstring que explica los par√°metros que espera y el valor que devuelve. Tambi√©n hemos definido una funci√≥n plot_signal que traza la se√±al generada. Esta funci√≥n es m√°s legible y f√°cil de entender gracias a los comentarios y la documentaci√≥n.",
    "crumbs": [
      "Fundamentos de Python",
      "Funciones y Bucles de Control"
    ]
  },
  {
    "objectID": "intro_python/functions_and_loops.html#funciones-lambda",
    "href": "intro_python/functions_and_loops.html#funciones-lambda",
    "title": "Funciones y Bucles de Control",
    "section": "",
    "text": "Las funciones lambda son funciones an√≥nimas que se pueden definir en una sola l√≠nea. Se definen con la palabra clave lambda, seguida de una lista de par√°metros y una expresi√≥n que se eval√∫a y devuelve el resultado. Por ejemplo, la siguiente funci√≥n lambda calcula el cuadrado de un n√∫mero:\n\nVer c√≥digo\n```{python}\ncuadrado_lamda = lambda x: x ** 2\n\nprint(cuadrado_lamda(5))\n```\n\n25\nLas funciones lambda son √∫tiles cuando se necesita una funci√≥n simple y no es necesario definirla con una declaraci√≥n def.\nAhora definamos una funci√≥n lambda un poco m√°s compleja para sumar dos n√∫meros:\n\nVer c√≥digo\n```{python}\nsuma_lambda = lambda x, y: x + y\n\nprint(suma_lambda(3, 4))\n```\n\n7",
    "crumbs": [
      "Fundamentos de Python",
      "Funciones y Bucles de Control"
    ]
  },
  {
    "objectID": "intro_python/functions_and_loops.html#creando-funciones-legibles",
    "href": "intro_python/functions_and_loops.html#creando-funciones-legibles",
    "title": "Funciones y Bucles de Control",
    "section": "",
    "text": "Es importante que las funciones sean f√°ciles de leer y entender. Para ello, es recomendable seguir las siguientes buenas pr√°cticas:\n\nNombres descriptivos: Usa nombres descriptivos para las funciones y los par√°metros.\nComentarios: A√±ade comentarios para explicar lo que hace cada parte de la funci√≥n.\nDocumentaci√≥n: Usa docstrings para documentar la funci√≥n y proporcionar informaci√≥n sobre su prop√≥sito, los par√°metros que espera y el valor que devuelve.\nDividir en funciones m√°s peque√±as: Si una funci√≥n es demasiado larga o hace demasiadas cosas, div√≠dela en funciones m√°s peque√±as que realicen tareas espec√≠ficas.\n\nVeamos un ejemplo de una funci√≥n bien documentada y legible:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este ejemplo, hemos definido una funci√≥n sine_wave que genera una se√±al de onda sinusoidal con los par√°metros de amplitud, frecuencia, fase, duraci√≥n y tasa de muestreo especificados. Hemos documentado la funci√≥n con un docstring que explica los par√°metros que espera y el valor que devuelve. Tambi√©n hemos definido una funci√≥n plot_signal que traza la se√±al generada. Esta funci√≥n es m√°s legible y f√°cil de entender gracias a los comentarios y la documentaci√≥n.",
    "crumbs": [
      "Fundamentos de Python",
      "Funciones y Bucles de Control"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ciencia de Datos con Python",
    "section": "",
    "text": "Este curso tiene como objetivo introducir a los estudiantes de la Facultad de Psicolog√≠a al mundo de la ciencia de datos utilizando Python. A lo largo del curso, los estudiantes aprender√°n a utilizar las librer√≠as m√°s populares de Python para el an√°lisis de datos, la visualizaci√≥n de datos, y la creaci√≥n de redes neuronales.\nEl curso no supone ning√∫n conocimiento previo de programaci√≥n, pero se espera que los estudiantes tengan una actitud proactiva y est√©n dispuestos a aprender. Adem√°s cuando sea necesario, se deberan utilizar conceptos de matem√°ticas y estad√≠stica b√°sica con el fin de entender los conceptos de ciencia de datos de manera m√°s profunda pero no es necesario tener un conocimiento previo de estos temas.",
    "crumbs": [
      "Inicio"
    ]
  },
  {
    "objectID": "index.html#acerca-de-este-curso",
    "href": "index.html#acerca-de-este-curso",
    "title": "Ciencia de Datos con Python",
    "section": "",
    "text": "Este curso tiene como objetivo introducir a los estudiantes de la Facultad de Psicolog√≠a al mundo de la ciencia de datos utilizando Python. A lo largo del curso, los estudiantes aprender√°n a utilizar las librer√≠as m√°s populares de Python para el an√°lisis de datos, la visualizaci√≥n de datos, y la creaci√≥n de redes neuronales.\nEl curso no supone ning√∫n conocimiento previo de programaci√≥n, pero se espera que los estudiantes tengan una actitud proactiva y est√©n dispuestos a aprender. Adem√°s cuando sea necesario, se deberan utilizar conceptos de matem√°ticas y estad√≠stica b√°sica con el fin de entender los conceptos de ciencia de datos de manera m√°s profunda pero no es necesario tener un conocimiento previo de estos temas.",
    "crumbs": [
      "Inicio"
    ]
  },
  {
    "objectID": "index.html#objetivos-del-curso",
    "href": "index.html#objetivos-del-curso",
    "title": "Ciencia de Datos con Python",
    "section": "Objetivos del curso",
    "text": "Objetivos del curso\n\nAprender a utilizar Python para el an√°lisis de datos, visualizaci√≥n de datos y creaci√≥n de redes neuronales.\nEntender los conceptos b√°sicos de las redes neuronales.\nEntender los conceptos b√°sicos de la estad√≠stica descriptiva e inferencial a trav√©s de ejemplos pr√°cticos.\n\n\n\nInstructor\n\n ¬† Christian Francisco Badillo Hern√°ndez\n ¬† Lab 25, Facultad de Psicolog√≠a, UNAM\n ¬† cris.badillo1408@gmail.com\n\n\n\nDetalles del curso\n\n ¬† Lunes - Viernes\n ¬† 10 de junio - 28 de junio de 2024\n ¬† 13:30 - 15:30 hrs\n ¬† Sal√≥n Pendiente\n ¬† Classroom",
    "crumbs": [
      "Inicio"
    ]
  },
  {
    "objectID": "index.html#temario",
    "href": "index.html#temario",
    "title": "Ciencia de Datos con Python",
    "section": "Temario",
    "text": "Temario",
    "crumbs": [
      "Inicio"
    ]
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Pyodide in Quarto HTML Documents",
    "section": "",
    "text": "This is a pyodide-enabled code cell in a Quarto HTML document.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n Volver arriba"
  }
]